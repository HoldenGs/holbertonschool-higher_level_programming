	>>> Square = __import__('4-square').Square


	>>> def test_init_bad(tests):
	...    for test in tests:
	...        try:
	...            x = Square(test)
	...        except Exception as e:
	...            print("{}: {}".format(type(e).__name__, e))
	...

	>>> test_init_bad(["hello", [1, 2], {}, ("a", 1), set(), test_init_bad])
    	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer

	>>> x = Square(-1)
	Traceback (most recent call last):
		  ...
	ValueError: size must be >= 0


	>>> x = Square(3)
	>>> print(type(x))
	<class '4-square.Square'>

	>>> print(x.__dict__)
	{'_Square__size': 3}

	>>> x = Square(3.0)
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer
	>>> print(type(x))
	<class '4-square.Square'>

	>>> print(x.__dict__)
	{'_Square__size': 3.0}


	>>> x = Square()
	>>> print(type(x))
	<class '4-square.Square'>

	>>> print(x.__dict__)
	{'_Square__size': 0}

	>>> x = Square(0)
	>>> print(type(x))
	<class '4-square.Square'>

	>>> print(x.__dict__)
	{'_Square__size': 0}

	>>> x = Square(3)
	>>> print(x._Square__size)
	3

	>>> x = Square()
	>>> print(x.size)
	0

	>>> x = Square(5)
	>>> print(x.size)
	5

	>>> def test_init_bad2(tests):
	...    for test in tests:
	...        try:
	...            x.size = test
	...        except Exception as e:
	...            print("{}: {}".format(type(e).__name__, e))
	...

	>>> test_init_bad2(["hello", [1, 2], {}, ("a", 1), set(), test_init_bad2])
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer
	TypeError: size must be an integer


>>> x.size = -1
Traceback (most recent call last):
ValueError: size must be >= 0
